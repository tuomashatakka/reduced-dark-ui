
                                                                                                                                                                                                                                                                                                                                                                        /*
    user.interface.mixins _ reduced-dark-ui


author      Tuomas Hatakka
email       tuomas.hatakka@gmail.com
copyright   Copyright (C) 2016-2017 Tuomas Hatakka


Variables                                                                                                                                                                                                                                                                                                                                                                 */

@roundness:         @button-border-radius;


                                                                                                                                                                                                                                                                                                                                                                        /*
Buttons                                                                                                                                                                                                                                                                                                                                                                 */

.button(@color) {
  @color-alt:       @col-dark;
  @color-disabled:  @text-color-subtle;
  @inner-height:    @button-height - @input-padding-vertical;
  @btn-size:        @button-height - @component-padding;
  @padding:         @component-padding / 2 @component-padding / 2 * 3;

  .text(caps);
  margin:           0;
  color:            @text-color;
  background:       @button-background-color;
  border-radius:    @roundness;
  padding:          @padding  !important;
  height:           @btn-size !important;
  min-width:        @btn-size !important;
  min-height:       @btn-size !important;
  line-height:      @btn-size !important;
  border-width:     1px       !important;
  border-style:     solid     !important;
  box-shadow:       none      !important;
  transition:       all       @transition-time / 2;
  box-sizing:       content-box;

  &.icon::before {
    font-size:      inherit;
    color:          inherit;
    vertical-align: middle }

  &:active, &:active:focus,
  &.selected:hover,
  &:focus, &:hover {
    outline:          none;
    background:       @color;
    color:            @color-alt  !important;
    border-color:     @color-alt  !important;
    border-width:     1px         !important;
    border-style:     solid       !important }

  &.selected {
    color:            @color-alt;
    background:       @button-background-color-selected;
    border:           1px solid @color !important }

  &[disabled], &.disabled {
    opacity:          1;
    background-color: transparent !important;
    border-color:     transparent !important;
    color:            @color-disabled !important }

  &:first-child {
    border-top-left-radius:     @roundness;
    border-bottom-left-radius:  @roundness }

  &:last-child {
    border-top-right-radius:    @roundness;
    border-bottom-right-radius: @roundness }}

.button-variant(@color) {
  .button(@color);
  color:              @color !important;
  border-color:       @color !important;
  background:         @button-background-color;

  &:hover {
    border-color:     @color !important }

  &.selected {
    color:            @base-background-color !important;
    background:       @color !important }

  &[disabled], &.disabled {
    opacity:          1;
    border-color:     @base-background-color !important;
    background-color: @base-background-color !important;
    color:            @text-color-subtle !important }}


                                                                                                                                                                                                                                                                                                                                                                        /*
User interaction and inputs                                                                                                                                                                                                                                                                                                                                                                 */

.selection(disabled) {
  -webkit-user-select: none;
  -webkit-user-drag: none }

.inputfield() {
  -webkit-appearance: none;
  font-family:        inherit;
  font-size:          @input-font-size;
  color:              @input-text-color !important;
  border-color:       @input-background-color !important;
  background:         @input-background-color !important;

  .userselect({
    border-radius:    @roundness;
    color:            @selection-text-color;
    background-color: @selection-background-color !important })}

.inputfield(editor) {
}

.inputfield(field) {
  .inputfield();
  transition:
    color             @transition-time,
    background-color  @transition-time;

  .focused({
    box-shadow:       @field-shadow;
    color:            @input-text-color-active !important;
    border-color:     @input-background-color  !important;
    background-color: @input-background-color-highlight !important })}


                                                                                                                                                                                                                                                                                                                                                                        /*
Text                                                                                                                                                                                                                                                                                                                                                                 */

.text() {           .text(normal) }
.text(highlight) {  .text(normal); color: @text-color-highlight; font-size: inherit }
.text(selected) {   .text(normal); color: @text-color-selected; font-size: inherit }
.text(subtle) {     .text(normal); color: @text-color-subtle; font-size: inherit }
.text(info) {       .text(normal); color: @text-color-info }
.text(success) {    .text(normal); color: @text-color-success }
.text(warning) {    .text(normal); color: @text-color-warning }
.text(error) {      .text(normal); color: @text-color-error }
.text(normal) {
  color:            @text-color;
  font-family:      @__uiFont, @font-family;
  font-size:        inherit;
  font-size:        @font-size;
  font-weight:      300;
  font-weight:      @font-weight !important }

.text(heading) {
  color:            @text-color;
  font-family:      @font-family-menu;
  font-weight:      @font-weight !important }

.text(caps) {
  font-size:   unit(@size-tiny, rem);
  color:            @text-color;
  font-family:      @font-family-caps;
  font-weight:      @font-weight !important;
  text-transform:   uppercase;
  letter-spacing:   0.1em; }

.text(menu) {
  font:             @font-weight 0.9em/26px @font-family-menu;
  text-transform:   uppercase;
  letter-spacing:   0.05em }


                                                                                                                                                                                                                                                                                                                                                                          /*
Overlay                                                                                                                                                                                                                                                                                                                                                                    */

.center() {
  position: fixed;
  top: 50vh;
  left: 50vw }

.overlay-shadow() {
  box-shadow: 0.2rem 0.4rem 2rem 0 rgba(0, 0, 0, 0.33) !important }


.icon(@content) {
  color: @text-color-subtle;
  font-family: FontAwesome;
  -webkit-font-smoothing: antialiased;
  content: @content;
  transition: all @transition-time }


/*&::before {
  font-family: "ionicons";
  content: "\f404";
  position: absolute;
  right: 0;
  width: 4.8rem;
  height: 4.8rem;
  line-height: 4.8rem;
  text-align: center;
  font-size: 24px;
  transform: translateX(100%);
  background: inherit }*/
.displayicon() {
  @size: 1.5em;
  @scale: 0.75;

  border-color:     auto;

  width:            @size;
  height:           @size;
  line-height:      @size;
  margin-right:     @component-padding / 4;
  position:         relative;
  vertical-align:   middle;
  text-align:       center;
  box-sizing:       content-box;

  &::after {
    position:       absolute;
    top:            0;
    left:           0;
    right:          0;
    bottom:         0;
    border:         1px solid;
    border-radius:  50%;
    content:        "";
    opacity:        0.4 }

  &::before {
    font-size: unit(@scale, em);
    position: absolute;
    line-height: inherit;
    text-align: center;
    display: block;
    width: auto;
    height: auto;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    margin: 0 }}

                                                                                                                                                                                                                                                                                                                                                                             /*
Colors & accent                                                                                                                                                                                                                                                                                                                                                              */
.state() {          background-color: @background-color-highlight }
.state(error) {     background-color: @background-color-error;    color: @text-color-error }
.state(warning) {   background-color: @background-color-warning;  color: @text-color-warning }
.state(info) {      background-color: @background-color-info;     color: @text-color-info }
.state(success) {   background-color: @background-color-success;  color: @text-color-success }
.state(added) {     &.modified, & .status-added {                 color: @text-color-added }}
.state(modified) {  &.modified, & .status-modified {              color: @text-color-modified }}
.state(ignored) {   &.ignored, & .status-ignored {                color: @text-color-ignored }}
.state(@class, @type) {
  @selector: ~".@{class}-@{type}";
  @selector2: ~".@{class}-default.@{class}-@{type}";
  @col: ~"text-color-@{type}";
  @bg: ~"background-color-@{type}";
  @selector {
    background-color: @@bg;
    color: @@col }}

.accent(@state: normal) {
  @color: @color-highlight;
  @light: @col-lighter;
  @dark: @col-dark;

  border-color: auto;
  color: @color;

  & when (lightness(@color) < 0.5) { background-color: @light }
  & when (lightness(@color) >= 0.5) { background-color: @dark }
  & when (@state = inverse) { .accent.inverse }
  &.active, &.selected { color: lighten(@color, 10%) }
  &:hover, &:focus { color: lighten(@color, 5%) }

  &.inverse {
    background-color: @color;

    & when (lightness(@color) < 0.5) { &, &:focus, &:active {
      color: @light;
      border-color: @color !important }}

    & when (lightness(@color) >= 0.5) { &, &:focus, &:active {
      color: @dark;
      border-color: @color !important }}}}

                                                                                                                                                                                                                                                                                                                                                                           /*
Media Queries                                                                                                                                                                                                                                                                                                                                                              */
.small(@args)  {                    .media(768px, @args)  }
.medium(@args) {                    .media(1200px, @args) }
.media(@breakpoint: 768px, @args) { @media (max-width: @breakpoint) { @args(); }}

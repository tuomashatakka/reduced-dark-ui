
                                                                                                                                                                                                                                                                                                                                                                        /*
    user.interface.mixins _ reduced-dark-ui


author      Tuomas Hatakka
email       tuomas.hatakka@gmail.com
copyright   Copyright (C) 2016-2017 Tuomas Hatakka

Variables                                                                                                                                                                                                                                                                                                                                                                 */
@roundness:         @button-border-radius;
                                                                                                                                                                                                                                                                                                                                                                        /*
Buttons                                                                                                                                                                                                                                                                                                                                                                 */
.button(@color) {}
.button-variant(@color) {
  .button(@color);
  color:              @color !important;
  border-color:       @color !important;
  background:         @button-background-color;

  &:hover {
    border-color:     @color !important }

  &.selected {
    color:            @base-background-color !important;
    background:       @color !important }

  &[disabled], &.disabled {
    opacity:          1;
    border-color:     @base-background-color !important;
    background-color: @base-background-color !important;
    color:            var(--color-text-subtle, @text-color-subtle) !important }}
                                                                                                                                                                                                                                                                                                                                                                        /*
UI Main                                                                                                                                                                                                                                                                                                                                                                 */
.bg(@var, @fallback: "base") {
  background-color: var(--background-color);
  --background-color: var(~"--color-background-@{var}", ~"@{fallback}-background-color") }

.txt(@var, @fallback: "main") {
  color: var(--text-color);
  --text-color: var(~"--color-text-@{var}", ~"text-color-@{fallback}", @text-color) }

.apply() {
  background-color: var(--background-color);
  color: var(--text-color) }

.apply(info) {
  --background-color: var(--color-background-info, @background-color-info);
  --text-color: var(--color-text-info, @text-color-info) }

.apply(error) {
  --background-color: var(--color-background-info, @background-color-error);
  --text-color: var(--color-text-info, @text-color-error) }
                                                                                                                                                                                                                                                                                                                                                                        /*
User interaction and inputs                                                                                                                                                                                                                                                                                                                                                                 */
.selection(disabled) {
  -webkit-user-select: none;
  -webkit-user-drag: none }

.inputfield() {
  -webkit-appearance: none;
  font-family:        inherit;
  font-size:          var(--size-text, @input-font-size);
  color:              var(--color-text-input, @input-text-color) !important;
  border-color:       var(--color-background-input, @input-background-color) !important;
  background:         var(--color-background-input, @input-background-color) !important;

  .userselect({
    border-radius:    @roundness;
    color:            var(--color-text-input, @selection-text-color);
    background-color: var(--color-background-selection, @selection-background-color) !important })}

.inputfield(editor) {
}
.inputfield(field) {
  .inputfield();
  transition: color var(--trans-default), background-color var(--trans-default);

  .focused({
    box-shadow:       @field-shadow;
    color:            var(--color-text-active, @input-text-color-active) !important;
    border-color:     var(--color-background-input, @input-background-color)  !important;
    background-color: var(--color-background-highlight, @input-background-color-highlight) !important })}
                                                                                                                                                                                                                                                                                                                                                                        /*
Text                                                                                                                                                                                                                                                                                                                                                                 */
.text() {
  .text(normal) }

.text(highlight) {
  .text(normal);
  font-size: inherit;
  .txt(highlight) }

.text(selected) {
  .text(normal);
  font-size: inherit;
  .txt(selected) }

.text(hover) {
  .text(normal);
  .txt(hover) }

.text(subtle) {
  .text(normal);
  font-size: inherit;
  .txt(minor) }

.text(minor) {
  .text(normal);
  .txt(minor) }

.text(info) {
  .text(normal);
  .txt(info) }

.text(success) {
  .text(normal);
  .txt(success) }
.text(warning) {
  .text(normal);
  .txt(warning) }
.text(ignored) {
  .text(normal);
  color: mix(@text-color-subtle, @base-background-color) }
.text(error) {
  .text(normal);
  .txt(error) }
.text(added) {
  .text(success);
  .txt(added) }
.text(removed) {
  .text(error);
  .txt(removed) }
.text(renamed) {
  .text(warning);
  .txt(renamed) }
.text(modified) {
  .text(warning);
  .txt(modified) }
.text(normal) {
  color:            var(--color-text, @text-color);
  font-family:      var(--font);
  font-size:        inherit;
  font-size:        @font-size;
  font-weight:      var(--font-weight, @font-weight, 400) }

.text(heading) {
  color:            var(--color-text, @text-color);
  font-family:      @font-family-menu;
  font-weight:      @font-weight }

.text(caps) {
  font-size:   unit(@size-tiny, rem);
  color:            var(--color-text, @text-color);
  font-family:      @font-family-caps;
  font-weight:      @font-weight;
  text-transform:   uppercase;
  letter-spacing:   0.1em; }

.text(menu) {
  font:             @font-weight 0.9em/26px @font-family-menu;
  text-transform:   uppercase;
  letter-spacing:   0.05em }


                                                                                                                                                                                                                                                                                                                                                                          /*
Overlay                                                                                                                                                                                                                                                                                                                                                                    */

.center() {
  position: fixed;
  top: 50vh;
  left: 50vw }

.overlay-shadow() {
  box-shadow: 0.2rem 0.4rem 2rem 0 rgba(0, 0, 0, 0.33) !important }

.icon(@content, @iconset: FontAwesome) {
  -webkit-font-smoothing: antialiased;
  color:        var(--color-text-subtle, @text-color-subtle);
  content:      @content;
  font-family:  @iconset;
  transition:   all @transition-time }


.outline-icon(@stroke: 1px) {
  &::before {
  color: inherit;
  -webkit-text-stroke-width: @stroke;
  -webkit-filter: blur(0.25px);
  -webkit-text-fill-color: transparent }}

/*&::before {
  font-family: "ionicons";
  content: "\f404";
  position: absolute;
  right: 0;
  width: 4.8rem;
  height: 4.8rem;
  line-height: 4.8rem;
  text-align: center;
  font-size: 24px;
  transform: translateX(100%);
  background: inherit }*/
.displayicon() {
  @size: 1.5em;
  @scale: 0.75;
  width:            @size;
  height:           @size;
  line-height:      @size;
  margin-right:     @component-padding / 4;
  border-color:     auto;
  vertical-align:   middle;
  text-align:       center;
  position:         relative;
  box-sizing:       content-box;

  &::after {
    content:        "";
    position:       absolute;
    top:            0;
    left:           0;
    right:          0;
    bottom:         0;
    border:         1px solid;
    border-radius:  50%;
    opacity:        0.4 }

  &::before {
    font-size: unit(@scale, em);
    position:       absolute;
    line-height:    inherit;
    text-align:     center;
    display:        block;
    width:          auto;
    height:         auto;
    top:            0;
    bottom:         0;
    left:           0;
    right:          0;
    margin:         0 }}

                                                                                                                                                                                                                                                                                                                                                                             /*
Colors & accent                                                                                                                                                                                                                                                                                                                                                              */
.state() {
  color: var(--text-color);
  background-color: var(--color-background-highlight, @background-color-highlight) }
.state(error) {
  background-color: var(--color-background-error, @background-color-error);
  .txt(error) }
.state(warning) {
  background-color: var(--color-background-warning, @background-color-warning);
  .txt(warning) }
.state(info) {
  background-color: var(--color-background-info, @background-color-info);
  .txt(info) }
.state(success) {
  background-color: var(--color-background-success, @background-color-success);
  .txt(success) }

.state(added) {     &.modified, & .status-added {
  .txt(added) }}
.state(modified) {  &.modified, & .status-modified {
  .txt(modified) }}
.state(ignored) {   &.ignored,  & .status-ignored {
  .txt(ignored) }}
.state(renamed) {   &.renamed,  & .status-renamed {
  .txt(renamed) }}
.state(removed) {   &.removed,  & .status-removed {
  .txt(removed) }}

.state(@class, @type) {
  @selector: ~".@{class}-@{type}";
  @selector2: ~".@{class}-default.@{class}-@{type}";
  @col: ~"text-color-@{type}";
  @bg: ~"background-color-@{type}";
  @selector {
    background-color: @@bg;
    color: @@col }}


.accent(@state: normal) {
  color: var(--color-primary);
  border-color: auto;
}
.accent.inverse {
  color: var(--color-primary);
  border-color: auto;
  background-color: var(--color-background-primary)
}
// .accent(@state: normal) {
//   @color: @color-highlight;
//   @light: @col-lighter;
//   @dark: @col-dark;
//
//   border-color: auto;
//   color: @color;
//
//   & when (lightness(@color) < 0.5) { background-color: @light }
//   & when (lightness(@color) >= 0.5) { background-color: @dark }
//   & when (@state = inverse) { .accent.inverse }
//   &.active, &.selected { color: lighten(@color, 10%) }
//   &:hover, &:focus { color: lighten(@color, 5%) }
//
//   &.inverse {
//     @color: @color-highlight;
//     @light: @col-lighter;
//     @dark: @col-dark;
//     background-color: @color;
//
//     & when (lightness(@color) < 0.5) { &, &:focus, &:active {
//       color: @light;
//       border-color: @color !important }}
//
//     & when (lightness(@color) >= 0.5) { &, &:focus, &:active {
//       color: @dark;
//       border-color: @color !important }}}}

                                                                                                                                                                                                                                                                                                                                                                           /*
Media Queries                                                                                                                                                                                                                                                                                                                                                              */
.small(@args)  {                    .media(768px, @args)  }
.medium(@args) {                    .media(1200px, @args) }
.media(@breakpoint: 768px, @args) { @media (max-width: @breakpoint) { @args(); }}
